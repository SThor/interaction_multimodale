/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import $1reco.Stroke;
import fr.dgac.ivy.Ivy;
import fr.dgac.ivy.IvyClient;
import fr.dgac.ivy.IvyException;
import fr.dgac.ivy.IvyMessageListener;
import java.util.List;
import java.awt.Point;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author givelpa
 */
public class MyFrame extends javax.swing.JFrame implements IvyMessageListener{
    private enum State{
        Learning, Reco
    }
    
    State state = State.Learning;
    Ivy bus;
    Stroke stroke = new Stroke();
    Stroke normalizedStroke;
    
    Map<String,Stroke> gestures = new HashMap<>();
    Map<String,Double> scores = new HashMap<>();
    
    /**
     * Creates new form MyFrame
     */
    public MyFrame() {
        initComponents();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        modePanel = new javax.swing.JPanel();
        radioButtonLearning = new javax.swing.JRadioButton();
        radioButtonReco = new javax.swing.JRadioButton();
        tracePanel = new TracePanel(stroke);
        southPanel = new javax.swing.JPanel();
        NamePanel = new javax.swing.JPanel();
        newNameLabel = new javax.swing.JLabel();
        newNameField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        RecoPanel = new javax.swing.JPanel();
        recognizedShapeLabel = new javax.swing.JLabel();
        recognizedShapeName = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemSaveGestures = new javax.swing.JMenuItem();
        menuItemImportGestures = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroup1.add(radioButtonLearning);
        radioButtonLearning.setText("Apprentissage");
        radioButtonLearning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonLearningActionPerformed(evt);
            }
        });
        modePanel.add(radioButtonLearning);

        buttonGroup1.add(radioButtonReco);
        radioButtonReco.setSelected(true);
        radioButtonReco.setText("Reconnaissance");
        radioButtonReco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonRecoActionPerformed(evt);
            }
        });
        modePanel.add(radioButtonReco);

        getContentPane().add(modePanel, java.awt.BorderLayout.NORTH);

        tracePanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout tracePanelLayout = new javax.swing.GroupLayout(tracePanel);
        tracePanel.setLayout(tracePanelLayout);
        tracePanelLayout.setHorizontalGroup(
            tracePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 494, Short.MAX_VALUE)
        );
        tracePanelLayout.setVerticalGroup(
            tracePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );

        getContentPane().add(tracePanel, java.awt.BorderLayout.CENTER);

        newNameLabel.setText("Nom associ√©");
        NamePanel.add(newNameLabel);

        newNameField.setAutoscrolls(false);
        newNameField.setMinimumSize(new java.awt.Dimension(100, 30));
        newNameField.setName(""); // NOI18N
        newNameField.setPreferredSize(new java.awt.Dimension(200, 30));
        NamePanel.add(newNameField);

        jButton1.setText("Ajouter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        NamePanel.add(jButton1);

        southPanel.add(NamePanel);

        recognizedShapeLabel.setText("Geste reconnu :");
        RecoPanel.add(recognizedShapeLabel);

        recognizedShapeName.setText("aucun");
        RecoPanel.add(recognizedShapeName);

        southPanel.add(RecoPanel);

        getContentPane().add(southPanel, java.awt.BorderLayout.SOUTH);

        menuFile.setText("File");

        menuItemSaveGestures.setText("Enregistrer les gestes");
        menuItemSaveGestures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveGesturesActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSaveGestures);

        menuItemImportGestures.setText("Importer des gestes");
        menuItemImportGestures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemImportGesturesActionPerformed(evt);
            }
        });
        menuFile.add(menuItemImportGestures);

        menuBar.add(menuFile);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioButtonLearningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonLearningActionPerformed
        switchToState(State.Learning);
    }//GEN-LAST:event_radioButtonLearningActionPerformed

    private void radioButtonRecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonRecoActionPerformed
        switchToState(State.Reco);
    }//GEN-LAST:event_radioButtonRecoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String name = newNameField.getText();
        if(!name.isEmpty()){
            gestures.put(name,normalizedStroke);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void menuItemSaveGesturesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveGesturesActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println(selectedFile.getName());
            try {
                FileOutputStream outFile = new FileOutputStream(selectedFile);
                ObjectOutputStream out = new ObjectOutputStream(outFile);
                out.writeObject(gestures);
                out.close();
                outFile.close();
            } catch (IOException ex) {
                Logger.getLogger(MyFrame.class.getName()).log(Level.SEVERE, null, ex);
            }         
        }
    }//GEN-LAST:event_menuItemSaveGesturesActionPerformed

    private void menuItemImportGesturesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemImportGesturesActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
          File selectedFile = fileChooser.getSelectedFile();
          System.out.println(selectedFile.getName());
          try {
                FileInputStream inFile = new FileInputStream(selectedFile);
                ObjectInputStream in = new ObjectInputStream(inFile);
                gestures = (Map<String, Stroke>) in.readObject();
                in.close();
                inFile.close();
          } catch (IOException ex) {
                Logger.getLogger(MyFrame.class.getName()).log(Level.SEVERE, null, ex);
          } catch (ClassNotFoundException c) {
                System.out.println("Map class not found");
                c.printStackTrace();
                return;
          } 
        }
    }//GEN-LAST:event_menuItemImportGesturesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyFrame().setVisible(true);
            }
        });
    }

    private void setup() {
        stroke.init();
        bus = new Ivy("$1Recognizer", "Ready", null);
        try {
            bus.start("127.0.0.1:1234");
            bus.sendToSelf(true);
            bus.bindMsg("Palette:Mouse(.*) x=(.*) y=(.*)", this);
            //bus.bindMsg("Interface(.*)", this);
        } catch (IvyException ex) {
            ex.printStackTrace();
        }
        switchToState(State.Reco);
    }
    
    
    private void switchToState(State s) {
        this.state = s;
        switch(state){
            case Learning:
                NamePanel.setVisible(true);
                RecoPanel.setVisible(false);
                break;
            case Reco : 
                NamePanel.setVisible(false);
                RecoPanel.setVisible(true);
                break;
        }
    }

    @Override
    public void receive(IvyClient client, String[] args) {
        switch(args[0]){
            case "Pressed":
                stroke.init();
                stroke.addPoint(Integer.parseInt(args[1]),Integer.parseInt(args[2]));
                break;
            case "Released":
                normalizedStroke = new Stroke(stroke);
                normalizedStroke.normalize();
                tracePanel.setNormalizedStroke(normalizedStroke);
                handleGesture();
                break;
            case "Moved":
                break;
            case "Dragged":
                stroke.addPoint(Integer.parseInt(args[1]),Integer.parseInt(args[2]));
                break;
        }
        tracePanel.repaint();
    }
    
    
    private void handleGesture() {
        switch(state){
            case Learning:                
                break;
            case Reco :
                Double minScore = Double.MAX_VALUE;
                String bestCandidate = "";
                for(String candidate : gestures.keySet()){
                    Double score = getScore(gestures.get(candidate),normalizedStroke);
                    if(score < minScore){
                        minScore = score;
                        bestCandidate = candidate;
                    }
                }
                recognizedShapeName.setText(bestCandidate);
                try {
                    bus.sendMsg("Gest nom="+bestCandidate);
                } catch (IvyException ex) {
                    ex.printStackTrace();
                }
                break;
        }
    }
    
    private double getScore(Stroke s1, Stroke s2){
        double score = 0;
        for (int i = 0; i < s1.size(); i++) {
            score += (s1.getPoint(i).x - s2.getPoint(i).x)*(s1.getPoint(i).x - s2.getPoint(i).x) + (s1.getPoint(i).y - s2.getPoint(i).y)*(s1.getPoint(i).y - s2.getPoint(i).y);
        }
        return score;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel NamePanel;
    private javax.swing.JPanel RecoPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuItemImportGestures;
    private javax.swing.JMenuItem menuItemSaveGestures;
    private javax.swing.JPanel modePanel;
    private javax.swing.JTextField newNameField;
    private javax.swing.JLabel newNameLabel;
    private javax.swing.JRadioButton radioButtonLearning;
    private javax.swing.JRadioButton radioButtonReco;
    private javax.swing.JLabel recognizedShapeLabel;
    private javax.swing.JLabel recognizedShapeName;
    private javax.swing.JPanel southPanel;
    private gui.TracePanel tracePanel;
    // End of variables declaration//GEN-END:variables
}
